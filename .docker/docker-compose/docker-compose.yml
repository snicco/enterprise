version: '3.9'

networks:
  network:

volumes:
  db:
  wordpress:
  wp_data:

x-user-args: &user-args
  APP_GROUP_ID: ${APP_GROUP_ID?}
  APP_GROUP_NAME: ${APP_GROUP_NAME?}
  APP_USER_ID: ${APP_USER_ID?}
  APP_USER_NAME: ${APP_USER_NAME?}

x-wp-env: &wp-env
  WORDPRESS_DB_HOST: db
  WORDPRESS_DB_USER: ${DB_USER:-root}
  WORDPRESS_DB_PASSWORD: ${DB_PASSWORD:-root}
  WORDPRESS_DB_NAME: ${DB_NAME:-snicco_enterprise}
  E2E_TEST_WORDPRESS_DB_NAME: ${DB_NAME:-snicco_enterprise_e2e_testing}

services:

  wp_data:
    container_name: wp_data
    build:
      context: ${MONOREPO_ROOT} # Pass the entire repository as the build context
      dockerfile: ./.docker/images/wordpress_data/wordpress_data.dockerfile
      args:
        <<: *user-args
        WP_VERSION: ${WP_VERSION?}
        WP_CLI_VERSION: ${WP_CLI_VERSION?}
        PHP_VERSION: ${PHP_VERSION?}
        ALPINE_VERSION: ${ALPINE_VERSION?}
        APP_CODE_PATH: ${WORDPRESS_CODE_PATH_CONTAINER?}
    tty: true
    volumes:
      - wp_data:${WORDPRESS_CODE_PATH_CONTAINER?}
      - ${MONOREPO_ROOT?}/src/Snicco/bundle:${WORDPRESS_CODE_PATH_CONTAINER?}/wp-content/bundle

  wp:
    container_name: wp
    build:
      context: ${MONOREPO_ROOT} # Pass the entire repository as the build context
      dockerfile: ./.docker/images/wordpress/wordpress.dockerfile
      args:
        <<: *user-args
        WP_VERSION: ${WP_VERSION?}
        WP_CLI_VERSION: ${WP_CLI_VERSION?}
        PHP_VERSION: ${PHP_VERSION?}
        ALPINE_VERSION: ${ALPINE_VERSION?}
        APP_CODE_PATH: ${WORDPRESS_CODE_PATH_CONTAINER?}
    environment: *wp-env
    volumes:
      - wordpress:${WORDPRESS_CODE_PATH_CONTAINER?}
      - ${MONOREPO_ROOT?}/src/Snicco/bundle:${WORDPRESS_CODE_PATH_CONTAINER?}/wp-content/bundle
#      - ${MONOREPO_ROOT?}/src/Snicco/bundle/fortress-bundle/tests/cli/fortress-test-mu-plugin:${WORDPRESS_CODE_PATH_CONTAINER?}/wp-content/mu-plugins/fortress-test-mu-plugin
#      - ${MONOREPO_ROOT?}/src/Snicco/bundle/fortress-bundle/tests/cli/fortress-test-mu-plugin.php:${WORDPRESS_CODE_PATH_CONTAINER?}/wp-content/mu-plugins/fortress-test-mu-plugin.php
    networks:
      - network
    depends_on:
      db:
        condition: service_healthy

  app:
    container_name: app
    build:
      context: ../
      dockerfile: ./images/app/app.dockerfile
      target: ${ENV?}
      args:
        <<: *user-args
        PHP_VERSION: ${PHP_VERSION?}
        ALPINE_VERSION: ${ALPINE_VERSION?}
        COMPOSER_VERSION: ${COMPOSER_VERSION?}
        CONTAINER_CODE_PATH: /project
        MONOREPO_PATH: /project/monorepo
        WORDPRESS_PATH: /project/wordpress
    environment:
      <<: *wp-env
      WORDPRESS_DB_NAME: snicco_enterprise_e2e_testing
    volumes:
      - ${MONOREPO_ROOT?}:/project/monorepo
      - wordpress:/project/wordpress
    secrets:
      - source: composer_auth_json
        target: /home/${APP_USER_NAME?}/.composer/auth.json
    depends_on:
      - wp
    # Keep the app container running.
    # There is no long-running process defined as the entrypoint for the container.
    # Keeping the container running saves as time for frequently run commands since
    # we can use docker exec over docker run.
    # @see https://stackoverflow.com/a/55953120
    networks:
      - network
    tty: true

  nginx:
    container_name: nginx
    build:
      context: ../images/nginx
      dockerfile: nginx.dockerfile
      args:
        <<: *user-args
        NGINX_VERSION: ${NGINX_VERSION?}
        APP_CODE_PATH: ${WORDPRESS_CODE_PATH_CONTAINER?}
    depends_on:
      - wp
    volumes:
      - wordpress:${WORDPRESS_CODE_PATH_CONTAINER?}
    networks:
      - network

  db:
    container_name: db
    image: ${DB_IMAGE?}
    environment:
      MYSQL_DATABASE: snicco_enterprise
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root}
    volumes:
      - ${MONOREPO_ROOT}/.docker/images/db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "mysql ${DB_NAME:-snicco_enterprise} -u${DB_USER:-root} -p${DB_PASSWORD:-root} -e 'SELECT 1;'  || exit 1" ]
      interval: 0.2s
      retries: 25
    networks:
      - network
  node:
    container_name: node
    build:
      context: ../images/node
      dockerfile: node.dockerfile
      target: ${ENV?}
      args:
        <<: *user-args
        NODE_VERSION: ${NODE_VERSION?}
        ALPINE_VERSION: ${ALPINE_VERSION?}
    volumes:
      - ${MONOREPO_ROOT?}:/project
    # Keep the node container running.
    # There is no long-running process defined as the entrypoint for the container.
    # Keeping the container running saves as time for frequently run commands since
    # we can use docker exec over docker run.
    # @see https://stackoverflow.com/a/55953120
    tty: true
    networks:
      - network

  chrome:
    container_name: chrome
    image: selenium/standalone-chrome:4.2.2-20220609
    shm_size: 2gb
    ports:
      - "4444:4444"
    networks:
      - network

secrets:
  composer_auth_json:
    file: ${COMPOSER_AUTH_JSON_PATH}
